name: anycrawl

x-common-service: &common-service
    networks:
        - anycrawl-network
    volumes:
        - ./storage:/usr/src/app/storage

x-common-env: &common-env
    NODE_ENV: ${NODE_ENV:-production}
    ANYCRAWL_HEADLESS: ${ANYCRAWL_HEADLESS:-true}
    ANYCRAWL_PROXY_URL: ${ANYCRAWL_PROXY_URL:-}
    ANYCRAWL_IGNORE_SSL_ERROR: ${ANYCRAWL_IGNORE_SSL_ERROR:-true}
    ANYCRAWL_REDIS_URL: ${ANYCRAWL_REDIS_URL:-redis://redis:6379}
    ANYCRAWL_API_PORT: ${ANYCRAWL_API_PORT:-8080}
    ANYCRAWL_API_AUTH_ENABLED: ${ANYCRAWL_API_AUTH_ENABLED:-false}
    ANYCRAWL_API_DB_TYPE: "sqlite"
    ANYCRAWL_API_DB_CONNECTION: "/usr/src/app/db/database.db"

services:
    api:
        <<: *common-service
        build:
            context: .
            dockerfile: apps/api/Dockerfile
            target: api
        environment:
            <<: *common-env
        ports:
            - "8081:8080"
        volumes:
            - ./storage:/usr/src/app/storage
            - ./db:/usr/src/app/db
        depends_on:
            - redis
        api:
    <<: *common-service
    build:
        context: .
        dockerfile: apps/api/Dockerfile
        target: api
    environment:
        <<: *common-env
    ports:
        - "8080:8080"
    volumes:
        - ./storage:/usr/src/app/storage
        - ./db:/usr/src/app/db
    depends_on:
        - redis
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.anycrawl-api.rule=Host(`anycrawl.fmx`)"
        - "traefik.http.routers.anycrawl-api.entrypoints=web"
        - "traefik.http.services.anycrawl-api.loadbalancer.server.port=8080"

    scrape-puppeteer:
        <<: *common-service
        build:
            context: .
            dockerfile: packages/scrape/Dockerfile.puppeteer
            target: scrape-puppeteer
        environment:
            <<: *common-env
        depends_on:
            - redis
    scrape-playwright:
        <<: *common-service
        build:
            context: .
            dockerfile: packages/scrape/Dockerfile.playwright
            target: scrape-playwright
        environment:
            <<: *common-env
        depends_on:
            - redis

    scrape-cheerio:
        <<: *common-service
        build:
            context: .
            dockerfile: packages/scrape/Dockerfile.cheerio
            target: scrape-cheerio
        environment:
            <<: *common-env
        depends_on:
            - redis
    redis:
        image: redis:7-alpine
        volumes:
            - redis-data:/data
        networks:
            - anycrawl-network
        command: redis-server --appendonly yes

volumes:
    redis-data:

networks:
    anycrawl-network:
        driver: bridge
